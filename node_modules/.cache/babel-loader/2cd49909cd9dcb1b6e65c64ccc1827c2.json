{"ast":null,"code":"var _jsxFileName = \"/home/hanin/projects/courses/todo-app/src/components/todo/todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport useForm from \"../../hook/form\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ToDo = () => {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const {\n    handleChange,\n    handleSubmit\n  } = useForm(addItem);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n\n      return item;\n    });\n    setList(items);\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      style: {\n        width: \"1000px\",\n        margin: \"0 auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"bp3-navbar .modifier \",\n        style: {\n          color: \"white\",\n          backgroundColor: \"#040303\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"To Do List: (\", incomplete, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div-flex\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toDo\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          interactive: true,\n          elevation: Elevation.TWO,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Add To Do Item\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              label: \"To Do Item\",\n              labelFor: \"text-input\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                class: \"bp3-input .modifier\",\n                onChange: handleChange,\n                name: \"text\",\n                type: \"text\",\n                placeholder: \"Item Details\",\n                dir: \"auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              label: \"Assigned To\",\n              labelFor: \"assignee\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                class: \"bp3-input .modifier\",\n                onChange: handleChange,\n                name: \"assignee\",\n                type: \"text\",\n                placeholder: \"Assignee Name\",\n                dir: \"auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              label: \"Difficulty\",\n              labelFor: \"assignee\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: handleChange,\n                defaultValue: 3,\n                type: \"range\",\n                min: 1,\n                max: 5,\n                name: \"difficulty\",\n                dir: \"auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: \"Add Item\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 1\n    }, this), list.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Assigned to: \", item.assignee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Difficulty: \", item.difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleComplete(item.id),\n        children: [\"Complete: \", item.complete.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ToDo, \"KGnI4uRsfdxDMA58OT2wFkFYU3Q=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDo;\nexport default ToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"sources":["/home/hanin/projects/courses/todo-app/src/components/todo/todo.js"],"names":["React","useEffect","useState","useForm","v4","uuid","ToDo","list","setList","incomplete","setIncomplete","handleChange","handleSubmit","addItem","item","console","log","id","complete","deleteItem","items","filter","toggleComplete","map","incompleteCount","length","document","title","width","margin","color","backgroundColor","Elevation","TWO","text","assignee","difficulty","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport useForm from \"../../hook/form\";\n\nimport { v4 as uuid } from \"uuid\";\n\nconst ToDo = () => {\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter((item) => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map((item) => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter((item) => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n  return (\n    <>\n      <header style={{ width: \"1000px\", margin: \"0 auto\" }}>\n        <nav\n          className=\"bp3-navbar .modifier \"\n          style={{ color: \"white\", backgroundColor: \"#040303\" }}\n        >\n          <h1>To Do List: ({incomplete})</h1>\n        </nav>\n      </header>\n\n      {/* <form onSubmit={handleSubmit}>\n        <h2>Add To Do Item</h2>\n\n        <label>\n          <span>To Do Item</span>\n          <input\n            onChange={handleChange}\n            name=\"text\"\n            type=\"text\"\n            placeholder=\"Item Details\"\n          />\n        </label>\n\n        <label>\n          <span>Assigned To</span>\n          <input\n            onChange={handleChange}\n            name=\"assignee\"\n            type=\"text\"\n            placeholder=\"Assignee Name\"\n          />\n        </label>\n\n        <label>\n          <span>Difficulty</span>\n          <input\n            onChange={handleChange}\n            defaultValue={3}\n            type=\"range\"\n            min={1}\n            max={5}\n            name=\"difficulty\"\n          />\n        </label>\n\n        <label>\n          <button type=\"submit\">Add Item</button>\n        </label>\n      </form> */}\n\n<div className=\"div-flex\">\n        <div className=\"toDo\">\n          <Card interactive={true} elevation={Elevation.TWO}>\n            <form onSubmit={handleSubmit}>\n              <h2>Add To Do Item</h2>\n              <FormGroup label=\"To Do Item\" labelFor=\"text-input\">\n                <input\n                  class=\"bp3-input .modifier\"\n                  onChange={handleChange}\n                  name=\"text\"\n                  type=\"text\"\n                  placeholder=\"Item Details\"\n                  dir=\"auto\"\n                />\n              </FormGroup>\n\n              <FormGroup label=\"Assigned To\" labelFor=\"assignee\">\n                <input\n                  class=\"bp3-input .modifier\"\n                  onChange={handleChange}\n                  name=\"assignee\"\n                  type=\"text\"\n                  placeholder=\"Assignee Name\"\n                  dir=\"auto\"\n                />\n              </FormGroup>\n              <br />\n              <FormGroup label=\"Difficulty\" labelFor=\"assignee\">\n                <input\n                  onChange={handleChange}\n                  defaultValue={3}\n                  type=\"range\"\n                  min={1}\n                  max={5}\n                  name=\"difficulty\"\n                  dir=\"auto\"\n                />\n              </FormGroup>\n\n              <br />\n              <label>\n                <Button type=\"submit\">Add Item</Button>\n              </label>\n            </form>\n          </Card>\n        </div>\n        </div>\n\n\n      {list.map((item) => (\n        <div key={item.id}>\n          <p>{item.text}</p>\n          <p>\n            <small>Assigned to: {item.assignee}</small>\n          </p>\n          <p>\n            <small>Difficulty: {item.difficulty}</small>\n          </p>\n          <div onClick={() => toggleComplete(item.id)}>\n            Complete: {item.complete.toString()}\n          </div>\n          <hr />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}